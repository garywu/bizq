import * as fs from 'fs-extra';
import * as path from 'path';
import { HTMLStaticAdapter } from '../html-static';
import { UniversalContent, CompileOptions, CompileResult } from '../../types';

export class CloudflareWorkersAdapter extends HTMLStaticAdapter {
  name = 'cloudflare-workers';
  version = '1.0.0';

  async compile(content: UniversalContent, options: CompileOptions): Promise<CompileResult> {
    const startTime = Date.now();

    try {
      // Ensure output directory exists
      await fs.ensureDir(options.output);

      // Generate HTML files using parent HTML static adapter
      const result = await super.compile(content, options);

      if (!result.success) {
        return result;
      }

      // Add Cloudflare Workers specific files
      await this.generateWorkerScript(content, options);
      await this.generateWranglerConfig(content, options);
      await this.generatePackageJson(content, options);

      return {
        ...result,
        duration: Date.now() - startTime
      };

    } catch (error) {
      return {
        success: false,
        outputPath: options.output,
        files: [],
        errors: [(error as Error).message],
        warnings: [],
        duration: Date.now() - startTime
      };
    }
  }

  private async generateWorkerScript(content: UniversalContent, options: CompileOptions): Promise<void> {
    // Generate main worker script for Cloudflare Workers
    const workerScript = `import { getAssetFromKV } from '@cloudflare/kv-asset-handler';

/**
 * Cloudflare Worker for ${content.config.title || 'BizQ Site'}
 * Generated by Universal Content Compiler
 */

export interface Env {
  __STATIC_CONTENT: KVNamespace;
  __STATIC_CONTENT_MANIFEST: string;
}

export default {
  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {
    try {
      // Handle static assets
      const page = await getAssetFromKV(
        {
          request,
          waitUntil: ctx.waitUntil.bind(ctx),
        },
        {
          ASSET_NAMESPACE: env.__STATIC_CONTENT,
          ASSET_MANIFEST: JSON.parse(env.__STATIC_CONTENT_MANIFEST),
          cacheControl: {
            browserTTL: 60 * 60 * 24 * 30, // 30 days
            edgeTTL: 60 * 60 * 24 * 30,
            bypassCache: false,
          },
        }
      );

      // Add security headers
      const response = new Response(page.body, page);
      response.headers.set('X-Frame-Options', 'DENY');
      response.headers.set('X-Content-Type-Options', 'nosniff');
      response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');

      return response;
    } catch (e) {
      // Fallback to index.html for SPA routing
      try {
        const notFoundResponse = await getAssetFromKV(
          {
            request: new Request(\`\${new URL(request.url).origin}/index.html\`),
            waitUntil: ctx.waitUntil.bind(ctx),
          },
          {
            ASSET_NAMESPACE: env.__STATIC_CONTENT,
            ASSET_MANIFEST: JSON.parse(env.__STATIC_CONTENT_MANIFEST),
          }
        );

        return new Response(notFoundResponse.body, {
          ...notFoundResponse,
          status: 200,
          headers: {
            ...notFoundResponse.headers,
            'X-Frame-Options': 'DENY',
            'X-Content-Type-Options': 'nosniff',
            'Referrer-Policy': 'strict-origin-when-cross-origin',
          },
        });
      } catch (e) {
        return new Response('Not Found', { status: 404 });
      }
    }
  },
};
`;

    const workerPath = path.join(options.output, 'src', 'index.ts');
    await fs.ensureDir(path.dirname(workerPath));
    await fs.writeFile(workerPath, workerScript);
  }

  private async generateWranglerConfig(content: UniversalContent, options: CompileOptions): Promise<void> {
    // Generate wrangler.toml for Cloudflare Workers
    const wranglerConfig = `name = "${content.config.title?.toLowerCase().replace(/\s+/g, '-') || 'bizq-site'}"
main = "src/index.ts"
compatibility_date = "${new Date().toISOString().split('T')[0]}"
compatibility_flags = ["nodejs_compat"]

[env.production]
# Production environment variables

# KV Namespace for static assets
[[kv_namespaces]]
binding = "__STATIC_CONTENT"
id = "your_static_content_namespace_id"
preview_id = "your_preview_namespace_id"

# D1 Database for dynamic content (optional)
# [[d1_databases]]
# binding = "DB"
# database_name = "content_db"
# database_id = "your_database_id"

# R2 Bucket for file storage (optional)
# [[r2_buckets]]
# binding = "FILES"
# bucket_name = "content-files"

# Environment variables
[vars]
STATIC_CONTENT_MANIFEST = "{}"

# Build configuration
[build]
command = "npm run build"

# Upload configuration
[site]
bucket = "./dist"
`;

    const wranglerPath = path.join(options.output, 'wrangler.toml');
    await fs.writeFile(wranglerPath, wranglerConfig);
  }

  private async generatePackageJson(content: UniversalContent, options: CompileOptions): Promise<void> {
    // Generate package.json for Cloudflare Workers
    const packageJson = {
      name: content.config.title?.toLowerCase().replace(/\s+/g, '-') || 'bizq-site',
      version: content.metadata.version || '1.0.0',
      description: content.config.description || `Static site generated by Universal Content Compiler`,
      main: 'src/index.ts',
      scripts: {
        build: 'tsc',
        deploy: 'wrangler deploy',
        dev: 'wrangler dev',
        preview: 'wrangler dev --local'
      },
      dependencies: {
        '@cloudflare/kv-asset-handler': '^0.3.0'
      },
      devDependencies: {
        '@cloudflare/workers-types': '^4.20231218.0',
        'typescript': '^5.0.0',
        'wrangler': '^3.0.0'
      }
    };

    const packagePath = path.join(options.output, 'package.json');
    await fs.writeFile(packagePath, JSON.stringify(packageJson, null, 2));
  }
}